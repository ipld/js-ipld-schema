// @ts-nocheck
// @generated by Peggy 5.0.4.
//
// https://peggyjs.org/

"use strict";

class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message);
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";
  }

  format(sources) {
    let str = "Error: " + this.message;
    if (this.location) {
      let src = null;
      const st = sources.find(s => s.source === this.location.source);
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g);
      }
      const s = this.location.start;
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
        ? this.location.source.offset(s)
        : s;
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
      if (src) {
        const e = this.location.end;
        const filler = "".padEnd(offset_s.line.toString().length, " ");
        const line = src[s.line - 1];
        const last = s.line === e.line ? e.column : line.length + 1;
        const hatLen = (last - s.column) || 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + offset_s.line + " | " + line + "\n"
            + filler + " | " + "".padEnd(s.column - 1, " ")
            + "".padEnd(hatLen, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
      : null;
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
      return s;
    }

    function literalEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    function classEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class(expectation) {
        const escapedParts = expectation.parts.map(
          part => (Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part))
        );

        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

      any() {
        return "any character";
      },

      end() {
        return "end of input";
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation);
      descriptions.sort();

      if (descriptions.length > 0) {
        let j = 1;
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions = {
    Root: peg$parseRoot,
  };
  let peg$startRuleFunction = peg$parseRoot;

  const peg$c0 = "type";
  const peg$c1 = "advanced";
  const peg$c2 = "enum";
  const peg$c3 = "union";
  const peg$c4 = "struct";
  const peg$c5 = "bytes";
  const peg$c6 = "[";
  const peg$c7 = "]";
  const peg$c8 = "&";
  const peg$c9 = "=";
  const peg$c10 = "{";
  const peg$c11 = "}";
  const peg$c12 = "|";
  const peg$c13 = "(";
  const peg$c14 = ")";
  const peg$c15 = ":";
  const peg$c16 = "optional";
  const peg$c17 = "nullable";
  const peg$c18 = "implicit";
  const peg$c19 = "rename";
  const peg$c20 = "true";
  const peg$c21 = "false";
  const peg$c22 = "representation";
  const peg$c23 = "keyed";
  const peg$c24 = "kinded";
  const peg$c25 = "stringprefix";
  const peg$c26 = "bytesprefix";
  const peg$c27 = "inline";
  const peg$c28 = "envelope";
  const peg$c29 = "discriminantKey";
  const peg$c30 = "contentKey";
  const peg$c31 = "map";
  const peg$c32 = "listpairs";
  const peg$c33 = "stringpairs";
  const peg$c34 = "innerDelim";
  const peg$c35 = "entryDelim";
  const peg$c36 = "tuple";
  const peg$c37 = "stringjoin";
  const peg$c38 = "fieldOrder";
  const peg$c39 = "join";
  const peg$c40 = "string";
  const peg$c41 = "int";
  const peg$c42 = ",";
  const peg$c43 = "\"";
  const peg$c44 = "bool";
  const peg$c45 = "float";
  const peg$c46 = "list";
  const peg$c47 = "link";
  const peg$c48 = "null";
  const peg$c49 = "any";
  const peg$c50 = "#";
  const peg$c51 = "@";
  const peg$c52 = "\r";
  const peg$c53 = "\n";

  const peg$r0 = /^[^"]/;
  const peg$r1 = /^[a-zA-Z]/;
  const peg$r2 = /^[a-zA-Z0-9_]/;
  const peg$r3 = /^[0-9]/;
  const peg$r4 = /^[ \t]/;
  const peg$r5 = /^[^)]/;
  const peg$r6 = /^[^\r\n]/;

  const peg$e0 = peg$literalExpectation("type", false);
  const peg$e1 = peg$literalExpectation("advanced", false);
  const peg$e2 = peg$literalExpectation("enum", false);
  const peg$e3 = peg$literalExpectation("union", false);
  const peg$e4 = peg$literalExpectation("struct", false);
  const peg$e5 = peg$literalExpectation("bytes", false);
  const peg$e6 = peg$literalExpectation("[", false);
  const peg$e7 = peg$literalExpectation("]", false);
  const peg$e8 = peg$literalExpectation("&", false);
  const peg$e9 = peg$literalExpectation("=", false);
  const peg$e10 = peg$literalExpectation("{", false);
  const peg$e11 = peg$literalExpectation("}", false);
  const peg$e12 = peg$literalExpectation("|", false);
  const peg$e13 = peg$literalExpectation("(", false);
  const peg$e14 = peg$literalExpectation(")", false);
  const peg$e15 = peg$literalExpectation(":", false);
  const peg$e16 = peg$literalExpectation("optional", false);
  const peg$e17 = peg$literalExpectation("nullable", false);
  const peg$e18 = peg$literalExpectation("implicit", false);
  const peg$e19 = peg$literalExpectation("rename", false);
  const peg$e20 = peg$literalExpectation("true", false);
  const peg$e21 = peg$literalExpectation("false", false);
  const peg$e22 = peg$literalExpectation("representation", false);
  const peg$e23 = peg$literalExpectation("keyed", false);
  const peg$e24 = peg$literalExpectation("kinded", false);
  const peg$e25 = peg$literalExpectation("stringprefix", false);
  const peg$e26 = peg$literalExpectation("bytesprefix", false);
  const peg$e27 = peg$literalExpectation("inline", false);
  const peg$e28 = peg$literalExpectation("envelope", false);
  const peg$e29 = peg$literalExpectation("discriminantKey", false);
  const peg$e30 = peg$literalExpectation("contentKey", false);
  const peg$e31 = peg$literalExpectation("map", false);
  const peg$e32 = peg$literalExpectation("listpairs", false);
  const peg$e33 = peg$literalExpectation("stringpairs", false);
  const peg$e34 = peg$literalExpectation("innerDelim", false);
  const peg$e35 = peg$literalExpectation("entryDelim", false);
  const peg$e36 = peg$literalExpectation("tuple", false);
  const peg$e37 = peg$literalExpectation("stringjoin", false);
  const peg$e38 = peg$literalExpectation("fieldOrder", false);
  const peg$e39 = peg$literalExpectation("join", false);
  const peg$e40 = peg$literalExpectation("string", false);
  const peg$e41 = peg$literalExpectation("int", false);
  const peg$e42 = peg$literalExpectation(",", false);
  const peg$e43 = peg$literalExpectation("\"", false);
  const peg$e44 = peg$classExpectation(["\""], true, false, false);
  const peg$e45 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false, false);
  const peg$e46 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false, false);
  const peg$e47 = peg$classExpectation([["0", "9"]], false, false, false);
  const peg$e48 = peg$literalExpectation("bool", false);
  const peg$e49 = peg$literalExpectation("float", false);
  const peg$e50 = peg$literalExpectation("list", false);
  const peg$e51 = peg$literalExpectation("link", false);
  const peg$e52 = peg$literalExpectation("null", false);
  const peg$e53 = peg$literalExpectation("any", false);
  const peg$e54 = peg$classExpectation([" ", "\t"], false, false, false);
  const peg$e55 = peg$literalExpectation("#", false);
  const peg$e56 = peg$literalExpectation("@", false);
  const peg$e57 = peg$classExpectation([")"], true, false, false);
  const peg$e58 = peg$classExpectation(["\r", "\n"], true, false, false);
  const peg$e59 = peg$literalExpectation("\r", false);
  const peg$e60 = peg$literalExpectation("\n", false);

  function peg$f0(roots) {
    // merge 'type' and 'advanced' structures into one {types:{}, advanced:{}}
    return roots.reduce((o1, o2) => {
      if (o2.types) {
        if (!o1.types) {
          o1.types = {}
        }
        Object.assign(o1.types, o2.types)
      } else if (o2.advanced) {
        if (!o1.advanced) {
          o1.advanced = {}
        }
        Object.assign(o1.advanced, o2.advanced)
      }
      return o1
    }, {})
  }
  function peg$f1(types) {    return { types }  }
  function peg$f2(advanced) {    return { advanced }  }
  function peg$f3(precomments, annotations, name, definition) {
    if (Object.keys(definition).length !== 1) {
      throw new Error('Unexpected definition for type: ' + JSON.stringify(definition))
    }
    const typ = Object.keys(definition)[0]
    const comments = processComments(precomments)
    if (options.includeComments && comments) {
      definition[typ].comments = extend(definition[typ].comments || {}, { type: comments })
    }
    if (options.includeComments && annotations && annotations.length) {
      definition[typ].annotations = extend(definition[typ].annotations || {}, { type: annotations })
    }
    return { [name]: definition }
  }
  function peg$f4(name) {
    return { [name]: { advanced: {} } }
  }
  function peg$f5(name) {
    return { advanced: name }
  }
  function peg$f6(descriptor) {    return descriptor  }
  function peg$f7(descriptor) {    return descriptor  }
  function peg$f8(descriptor) {    return descriptor  }
  function peg$f9(descriptor) {    return descriptor  }
  function peg$f10(descriptor) {    return descriptor  }
  function peg$f11(descriptor) {    return descriptor  }
  function peg$f12(descriptor) {    return descriptor  }
  function peg$f13(descriptor) {    return descriptor  }
  function peg$f14(kind) {    return { [kind]: {} }  }
  function peg$f15(kind) {    return kind  }
  function peg$f16(fields, representation) {
    return { list: Object.assign({}, fields, representation ? { representation } : null) }
  }
  function peg$f17(options, valueType) {
    return options.reduce(extend, { valueType })
  }
  function peg$f18(expectedType) {
    return { link: { expectedType } }
  }
  function peg$f19(fromType) {
    return { copy: { fromType } }
  }
  function peg$f20(members, representation) {
    if (!representation || !(representation.string || representation.int)) {
      representation = { string: {} }
    }

    const repr = members.filter((m) => Object.values(m)[0]).reduce(extend, {})
    members = Object.keys(members.reduce(extend, {}))

    if (representation.string) {
      representation.string = repr
    } else if (representation.int) {
      representation.int = repr
      Object.entries(repr).forEach(([k, v]) => {
        const i = parseInt(v, 10)
        if (i != v) {
          throw new Error('int representations only support integer representation values')
        }
        repr[k] = i
      })
    }

    return { enum: { members, representation } }
  }
  function peg$f21(name, representationOptions) {
    return { [name]: representationOptions }
  }
  function peg$f22(value) {    return value  }
  function peg$f23(values, representation) {
    let fields = values.reduce(extend, {})
    if (representation.keyed) {
      representation.keyed = fields
    } else if (representation.kinded) {
      representation.kinded = fields
    } else if (representation.stringprefix) {
      representation.stringprefix = { prefixes: fields }
    } else if (representation.bytesprefix) {
      representation.bytesprefix = { prefixes: fields }
    } else if (representation.inline) {
      representation.inline.discriminantTable = fields
    } else if (representation.envelope) {
      representation.envelope.discriminantTable = fields
    } else {
      throw new Error('Unsupported union type') // we shouldn't get here if we're coded right
    }
    return { union: { members: Object.values(fields), representation } }
  }
  function peg$f24(type, name) {
    return { [name]: type }
  }
  function peg$f25(keyType, valueType, representation) {
    let representationType = (representation && representation.type)
    if (representationType) {
      representation = { [representationType]: representation || {} }
      delete representation[representationType].type
    }
    return { map: Object.assign({ keyType }, valueType, representation ? { representation } : null) }
  }
  function peg$f26(values, representation) {
    let fields = values.reduce(extend, {})
    // Field representation options can come in from parens following field definitions,
    // annotations comments prior to field definitions, and any additional precomments or line
    // comments need to be captured from around the field. These all need to be lifted out of the
    // entry and packaged separately.
    const [representationFields, annotationsFields, commentsFields] = Object.entries(fields).reduce((p, fieldEntry) => {
      if (fieldEntry[1].representationOptions) {
        p[0][fieldEntry[0]] = fieldEntry[1].representationOptions
        delete fieldEntry[1].representationOptions
      }
      if (fieldEntry[1].annotations) {
        p[1][fieldEntry[0]] = fieldEntry[1].annotations
        delete fieldEntry[1].annotations
      }
      if (fieldEntry[1].comments) {
        p[2][fieldEntry[0]] = fieldEntry[1].comments
        delete fieldEntry[1].comments
      }
      return p
    }, [{}, {}, {}])
    let representationType = (representation && representation.type)
    if (representationType) {
      // restructure from { type: 'foo', bar: 'baz' } to { foo: { bar: 'baz' } }
      representation = { [representationType]: representation || {} }
      delete representation[representationType].type
      /* auto-fill fieldOrder? if (representationType === 'tuple' && !representation.tuple.fieldOrder) {
        representation.tuple.fieldOrder = Object.keys(fields)
      } */
    }
    // handle inline field representation data
    if (Object.keys(representationFields).length) {
      if (!representation) {
        representation = defaultStructRepresentation()
      }
      if (!representation.map) {
        throw new Error('field modifiers only valid for struct map representation')
      }
      representation.map.fields = representationFields
    }
    return { struct:
      extend(
        extend(
          extend({ fields }, { representation: representation || defaultStructRepresentation() }),
          Object.keys(annotationsFields).length > 0 ? { annotations: { fields: annotationsFields } } : null
        ), Object.keys(commentsFields).length > 0 ? { comments: { fields: commentsFields} } : null
      )
    }
  }
  function peg$f27(values) {
    return values
  }
  function peg$f28() {    return []  }
  function peg$f29(precomments, annotations, key, options) {    return options  }
  function peg$f30(precomments, annotations, key, options, type, representationOptions, linecomment) {
    const comments = processComments(precomments, linecomment)
    return { [key]: options.reduce(extend,
       extend(
          extend(
            extend({ type }, comments ? { comments } : null),
            representationOptions ? { representationOptions } : null),
          annotations.length ? { annotations } : null
       )
      )
    }
  }
  function peg$f31() {    return { optional: true }  }
  function peg$f32() {    return { nullable: true }  }
  function peg$f33() {    return { optional: true }  }
  function peg$f34() {    return { valueNullable: true }  }
  function peg$f35(type) {    return type  }
  function peg$f36(options) {
    return options.reduce(extend, {})
  }
  function peg$f37(implicit) {    return { implicit }  }
  function peg$f38(rename) {    return { rename }  }
  function peg$f39(implicit) {    return implicit  }
  function peg$f40(implicit) {    return parseInt(implicit, 10)  }
  function peg$f41() {    return true  }
  function peg$f42() {    return false  }
  function peg$f43(representation) {
    return representation
  }
  function peg$f44(representation) {
    return representation
  }
  function peg$f45(representation) {
    return representation
  }
  function peg$f46(representation) {
    return representation
  }
  function peg$f47(representation) {
    return representation
  }
  function peg$f48() {    return { keyed: {} }  }
  function peg$f49() {    return { kinded: {} }  }
  function peg$f50() {    return { stringprefix: {} }  }
  function peg$f51() {    return { bytesprefix: {} }  }
  function peg$f52(descriptor) {    return descriptor  }
  function peg$f53(descriptor) {    return descriptor  }
  function peg$f54(discriminantKey) {
    return { inline: { discriminantKey } }
  }
  function peg$f55(discriminantKey, contentKey) {
    return { envelope: { discriminantKey, contentKey } }
  }
  function peg$f56() {    return { type: 'map' }  }
  function peg$f57() {    return { type: 'listpairs' }  }
  function peg$f58(representation) {    return representation  }
  function peg$f59(representation) {    return representation  }
  function peg$f60(options) {
    let representation = extend({ type: 'stringpairs' }, options.reduce(extend, {}))
    if (!representation.innerDelim || !representation.entryDelim) {
      throw new Error('"stringpairs" representation requires both "innerDelim" and "entryDelim" options')
    }
    return representation
  }
  function peg$f61(innerDelim) {    return { innerDelim }  }
  function peg$f62(entryDelim) {    return { entryDelim }  }
  function peg$f63(representation) {    return representation  }
  function peg$f64() {    return { type: 'map' }  }
  function peg$f65(fieldOrder) {    return extend({ type: 'tuple' }, fieldOrder ? { fieldOrder } : null)  }
  function peg$f66(fields) {    return extend({ type: 'stringjoin' }, fields )  }
  function peg$f67(representation) {    return representation  }
  function peg$f68() {    return { type: 'listpairs' }  }
  function peg$f69(fieldOrder) {
    return fieldOrder
  }
  function peg$f70(fieldOrder) {
    return fieldOrder
  }
  function peg$f71(fields) {
    fields = fields.reduce(extend, {})
    if (!fields.join) {
      throw new Error('stringjoin representation needs a "join" specifier')
    }
    return fields
  }
  function peg$f72(join) {
    return { join }
  }
  function peg$f73(fieldOrder) {
    return { fieldOrder }
  }
  function peg$f74() {    return { string: {} }  }
  function peg$f75() {    return { int: {} }  }
  function peg$f76(representation) {    return { bytes: { representation } }  }
  function peg$f77(firstElement, s) {    return s  }
  function peg$f78(firstElement, subsequentElements) {
    if (!firstElement) {
      return []
    }
    if (!subsequentElements) {
      return [ firstElement ]
    }
    return [ firstElement ].concat(subsequentElements)
  }
  function peg$f79(chars) {    return chars.join('')  }
  function peg$f80(first, remainder) {    return first + remainder.join('')  }
  function peg$f81(chars) {    return parseInt(chars.join(''), 10)  }
  function peg$f82(name, value) {    return value  }
  function peg$f83(name, value) {
    return { [name]: value ? value.join('') : '' }
  }
  function peg$f84(comments) {
    return flattenArray(comments).join('')
  }
  function peg$f85() {    return  }
  function peg$f86() {    return  }
  function peg$f87() {    return  }
  function peg$f88() {    return  }
  function peg$f89() {    return  }
  let peg$currPos = options.peg$currPos | 0;
  let peg$savedPos = peg$currPos;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = peg$currPos;
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
  let peg$silentFails = options.peg$silentFails | 0;

  let peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos);
    if (cp === undefined) {
      return "";
    }
    return String.fromCodePoint(cp);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text, ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description };
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseRoot() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseRootConstructs();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseRootConstructs();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseRootConstructs() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTypeDef();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f1(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseAdvancedDef();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f2(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseTypeDef() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsews();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsews();
    }
    s2 = peg$parsecapturedcomment();
    s3 = [];
    s4 = peg$parseAnnotation();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$parseAnnotation();
    }
    if (input.substr(peg$currPos, 4) === peg$c0) {
      s4 = peg$c0;
      peg$currPos += 4;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s4 !== peg$FAILED) {
      s5 = [];
      s6 = peg$parsews();
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parsews();
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseStringName();
        if (s6 !== peg$FAILED) {
          s7 = [];
          s8 = peg$parsews();
          if (s8 !== peg$FAILED) {
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parsews();
            }
          } else {
            s7 = peg$FAILED;
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parseDefinition();
            if (s8 !== peg$FAILED) {
              s9 = [];
              s10 = peg$parsews();
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parsews();
              }
              s10 = [];
              s11 = peg$parsenewline();
              while (s11 !== peg$FAILED) {
                s10.push(s11);
                s11 = peg$parsenewline();
              }
              peg$savedPos = s0;
              s0 = peg$f3(s2, s3, s6, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdvancedDef() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 8) === peg$c1) {
      s2 = peg$c1;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseStringName();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f4(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAdvancedRepresentation() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseStringName();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f5(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDefinition() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseMapDescriptor();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f6(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseListDescriptor();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f7(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseLinkDescriptor();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f8(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCopyDescriptor();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f9(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseEnumKind();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsewsnl();
              s3 = peg$parseEnumDescriptor();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f10(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseUnionKind();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsewsnl();
                s3 = peg$parseUnionDescriptor();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f11(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseStructKind();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parsewsnl();
                  s3 = peg$parseStructDescriptor();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f12(s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseBytesKind();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parsewsnl();
                    s3 = peg$parseBytesDescriptor();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f13(s3);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseSimpleKind();
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f14(s1);
                    }
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseEnumKind() {
    let s0;

    if (input.substr(peg$currPos, 4) === peg$c2) {
      s0 = peg$c2;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseUnionKind() {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c3) {
      s0 = peg$c3;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    return s0;
  }

  function peg$parseStructKind() {
    let s0;

    if (input.substr(peg$currPos, 6) === peg$c4) {
      s0 = peg$c4;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }

    return s0;
  }

  function peg$parseBytesKind() {
    let s0;

    if (input.substr(peg$currPos, 5) === peg$c5) {
      s0 = peg$c5;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

    return s0;
  }

  function peg$parseSimpleKind() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseBaseType();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseListDescriptor() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseTypeDescriptor();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c7;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewsnl();
          s7 = peg$parseListRepresentation();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f16(s3, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTypeDescriptor() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseTypeOption();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseTypeOption();
    }
    s2 = peg$parse_();
    s3 = peg$parseStringName();
    if (s3 === peg$FAILED) {
      s3 = peg$parseMapDescriptor();
      if (s3 === peg$FAILED) {
        s3 = peg$parseListDescriptor();
        if (s3 === peg$FAILED) {
          s3 = peg$parseLinkDescriptor();
        }
      }
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f17(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLinkDescriptor() {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseStringName();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f18(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCopyDescriptor() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c9;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      s3 = peg$parseStringName();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumDescriptor() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseEnumMember();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseEnumMember();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c11;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewsnl();
          s5 = peg$parseEnumRepresentation();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          s6 = peg$parsewsnl();
          peg$savedPos = s0;
          s0 = peg$f20(s2, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumMember() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsewsnl();
    if (input.charCodeAt(peg$currPos) === 124) {
      s2 = peg$c12;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsewsnl();
      s4 = peg$parseStringName();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parseEnumFieldRepresentationOptions();
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parsewsnl();
        peg$savedPos = s0;
        s0 = peg$f21(s4, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumFieldRepresentationOptions() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c13;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsews();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsews();
      }
      s3 = peg$parseQuotedString();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parsews();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parsews();
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c14;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f22(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnionDescriptor() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseUnionValue();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseUnionValue();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c11;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsewsnl();
          s5 = peg$parseUnionRepresentation();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsewsnl();
            peg$savedPos = s0;
            s0 = peg$f23(s2, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnionValue() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsewsnl();
    if (input.charCodeAt(peg$currPos) === 124) {
      s2 = peg$c12;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parsews();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parsews();
      }
      s4 = peg$parseStringName();
      if (s4 === peg$FAILED) {
        s4 = peg$parseLinkDescriptor();
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$parsews();
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parsews();
        }
        s6 = peg$parseQuotedString();
        if (s6 === peg$FAILED) {
          s6 = peg$parseBaseType();
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f24(s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMapDescriptor() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseStringName();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s5 = peg$c15;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parseTypeDescriptor();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s9 = peg$c11;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
            if (s9 !== peg$FAILED) {
              s10 = peg$parsewsnl();
              s11 = peg$parseMapRepresentation();
              if (s11 === peg$FAILED) {
                s11 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f25(s3, s7, s11);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructDescriptor() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseStructValues();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c11;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsews();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsews();
          }
          s5 = peg$parseStructRepresentation();
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f26(s2, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructValues() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseStructValue();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseStructValue();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f27(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      peg$savedPos = s0;
      s1 = peg$f28();
      s0 = s1;
    }

    return s0;
  }

  function peg$parseStructValue() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsews();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsews();
    }
    s2 = peg$parsecapturedcomment();
    s3 = [];
    s4 = peg$parseAnnotation();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$parseAnnotation();
    }
    s4 = peg$parseStringName();
    if (s4 !== peg$FAILED) {
      s5 = [];
      s6 = peg$parsews();
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$parsews();
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = [];
        s7 = peg$currPos;
        s8 = peg$parseStructFieldOption();
        if (s8 !== peg$FAILED) {
          s9 = [];
          s10 = peg$parsews();
          if (s10 !== peg$FAILED) {
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parsews();
            }
          } else {
            s9 = peg$FAILED;
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s7;
            s7 = peg$f29(s2, s3, s4, s8);
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$currPos;
          s8 = peg$parseStructFieldOption();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parsews();
            if (s10 !== peg$FAILED) {
              while (s10 !== peg$FAILED) {
                s9.push(s10);
                s10 = peg$parsews();
              }
            } else {
              s9 = peg$FAILED;
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s7;
              s7 = peg$f29(s2, s3, s4, s8);
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
        }
        s7 = peg$parseStructType();
        if (s7 !== peg$FAILED) {
          s8 = [];
          s9 = peg$parsews();
          while (s9 !== peg$FAILED) {
            s8.push(s9);
            s9 = peg$parsews();
          }
          s9 = peg$parseStructFieldRepresentationOptions();
          if (s9 === peg$FAILED) {
            s9 = null;
          }
          s10 = [];
          s11 = peg$parsews();
          while (s11 !== peg$FAILED) {
            s10.push(s11);
            s11 = peg$parsews();
          }
          s11 = peg$parsecomment();
          if (s11 === peg$FAILED) {
            s11 = null;
          }
          s12 = [];
          s13 = peg$parsews();
          while (s13 !== peg$FAILED) {
            s12.push(s13);
            s13 = peg$parsews();
          }
          s13 = [];
          s14 = peg$parsenewline();
          while (s14 !== peg$FAILED) {
            s13.push(s14);
            s14 = peg$parsenewline();
          }
          peg$savedPos = s0;
          s0 = peg$f30(s2, s3, s4, s6, s7, s9, s11);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructFieldOption() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f31();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c17) {
        s1 = peg$c17;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f32();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseTypeOption() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f33();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c17) {
        s1 = peg$c17;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f34();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseStructType() {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseStringName();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f35(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parseMapDescriptor();
      if (s0 === peg$FAILED) {
        s0 = peg$parseListDescriptor();
        if (s0 === peg$FAILED) {
          s0 = peg$parseLinkDescriptor();
        }
      }
    }

    return s0;
  }

  function peg$parseStructFieldRepresentationOptions() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c13;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsews();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsews();
      }
      s3 = [];
      s4 = peg$parseStructFieldRepresentationOption();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseStructFieldRepresentationOption();
      }
      s4 = [];
      s5 = peg$parsews();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parsews();
      }
      if (input.charCodeAt(peg$currPos) === 41) {
        s5 = peg$c14;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e14); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f36(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructFieldRepresentationOption() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsews();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsews();
      }
      s3 = peg$parseImplicitOption();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f37(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c19) {
        s1 = peg$c19;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsews();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsews();
        }
        s3 = peg$parseQuotedString();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsews();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsews();
          }
          peg$savedPos = s0;
          s0 = peg$f38(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseImplicitOption() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseQuotedString();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsews();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsews();
      }
      peg$savedPos = s0;
      s0 = peg$f39(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseInteger();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsews();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsews();
        }
        peg$savedPos = s0;
        s0 = peg$f40(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c20) {
          s1 = peg$c20;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f41();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c21) {
            s1 = peg$c21;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e21); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f42();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseUnionRepresentation() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      s3 = peg$parseUnionRepresentationType();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f43(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMapRepresentation() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      s3 = peg$parseMapRepresentationType();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f44(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseListRepresentation() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      s3 = peg$parseListRepresentationType();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f45(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructRepresentation() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      s3 = peg$parseStructRepresentationType();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f46(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumRepresentation() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      s3 = peg$parseEnumRepresentationType();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f47(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnionRepresentationType() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c23) {
      s1 = peg$c23;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f48();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c24) {
        s1 = peg$c24;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f49();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 12) === peg$c25) {
          s1 = peg$c25;
          peg$currPos += 12;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f50();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 11) === peg$c26) {
            s1 = peg$c26;
            peg$currPos += 11;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e26); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f51();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c27) {
              s1 = peg$c27;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e27); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parsewsnl();
              s3 = peg$parseUnionInlineKeyDefinition();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f52(s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 8) === peg$c28) {
                s1 = peg$c28;
                peg$currPos += 8;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e28); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parsewsnl();
                s3 = peg$parseUnionEnvelopeKeyDefinition();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f53(s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseUnionInlineKeyDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      if (input.substr(peg$currPos, 15) === peg$c29) {
        s3 = peg$c29;
        peg$currPos += 15;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 15) === peg$c29) {
          s3 = peg$c29;
          peg$currPos += 15;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsewsnl();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 125) {
            s7 = peg$c11;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
          if (s7 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f54(s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseUnionEnvelopeKeyDefinition() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      if (input.substr(peg$currPos, 15) === peg$c29) {
        s3 = peg$c29;
        peg$currPos += 15;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 15) === peg$c29) {
          s3 = peg$c29;
          peg$currPos += 15;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsewsnl();
        s5 = peg$parseQuotedString();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsewsnl();
          if (input.substr(peg$currPos, 10) === peg$c30) {
            s7 = peg$c30;
            peg$currPos += 10;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
          if (s7 !== peg$FAILED) {
            s8 = peg$parsewsnl();
            s9 = peg$parseQuotedString();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s11 = peg$c11;
                peg$currPos++;
              } else {
                s11 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
              if (s11 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f55(s5, s9);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMapRepresentationType() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f56();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c32) {
        s1 = peg$c32;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f57();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 11) === peg$c33) {
          s1 = peg$c33;
          peg$currPos += 11;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsewsnl();
          s3 = peg$parseMapStringpairsRepresentation();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f58(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c1) {
            s1 = peg$c1;
            peg$currPos += 8;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsewsnl();
            s3 = peg$parseAdvancedRepresentation();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f59(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMapStringpairsRepresentation() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      s3 = [];
      s4 = peg$parseMapStringpairsRepresentationOptions();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseMapStringpairsRepresentationOptions();
      }
      s4 = peg$parsewsnl();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c11;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f60(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMapStringpairsRepresentationOptions() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsewsnl();
    if (input.substr(peg$currPos, 10) === peg$c34) {
      s2 = peg$c34;
      peg$currPos += 10;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsewsnl();
      s4 = peg$parseQuotedString();
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f61(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsewsnl();
      if (input.substr(peg$currPos, 10) === peg$c35) {
        s2 = peg$c35;
        peg$currPos += 10;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsewsnl();
        s4 = peg$parseQuotedString();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f62(s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseListRepresentationType() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c1) {
      s1 = peg$c1;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      s3 = peg$parseAdvancedRepresentation();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f63(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructRepresentationType() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f64();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c36) {
        s1 = peg$c36;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewsnl();
        s3 = peg$parseStructTupleRepresentationFields();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f65(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 10) === peg$c37) {
          s1 = peg$c37;
          peg$currPos += 10;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsewsnl();
          s3 = peg$parseStructStringjoinRepresentationFields();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f66(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 11) === peg$c33) {
            s1 = peg$c33;
            peg$currPos += 11;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e33); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsewsnl();
            s3 = peg$parseMapStringpairsRepresentation();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f67(s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c32) {
              s1 = peg$c32;
              peg$currPos += 9;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f68();
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseStructTupleRepresentationFields() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseStructTupleRepresentationFieldOrder();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 125) {
        s5 = peg$c11;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f69(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructTupleRepresentationFieldOrder() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c38) {
      s1 = peg$c38;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQuotedStringArray();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f70(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructStringjoinRepresentationFields() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseStructStringjoinRepresentationField();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseStructStringjoinRepresentationField();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c11;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f71(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructStringjoinRepresentationField() {
    let s0;

    s0 = peg$parseStructStringjoinRepresentationField_Join();
    if (s0 === peg$FAILED) {
      s0 = peg$parseStructStringjoinRepresentationField_FieldOrder();
    }

    return s0;
  }

  function peg$parseStructStringjoinRepresentationField_Join() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c39) {
      s2 = peg$c39;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseQuotedString();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f72(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStructStringjoinRepresentationField_FieldOrder() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 10) === peg$c38) {
      s2 = peg$c38;
      peg$currPos += 10;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseQuotedStringArray();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f73(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEnumRepresentationType() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f74();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c41) {
        s1 = peg$c41;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f75();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseBytesDescriptor() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c22) {
      s1 = peg$c22;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsewsnl();
      if (input.substr(peg$currPos, 8) === peg$c1) {
        s3 = peg$c1;
        peg$currPos += 8;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsewsnl();
        s5 = peg$parseAdvancedRepresentation();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f76(s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuotedStringArray() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseQuotedString();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 44) {
        s7 = peg$c42;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s9 = peg$parseQuotedString();
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          peg$savedPos = s5;
          s5 = peg$f77(s3, s9);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s7 = peg$c42;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$parseQuotedString();
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            peg$savedPos = s5;
            s5 = peg$f77(s3, s9);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s6 = peg$c7;
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s6 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f78(s3, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuotedString() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c43;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r0.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r0.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e44); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c43;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f79(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStringName() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r1.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r2.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r2.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f80(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInteger() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r3.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r3.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f81(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBaseType() {
    let s0;

    if (input.substr(peg$currPos, 4) === peg$c44) {
      s0 = peg$c44;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c40) {
        s0 = peg$c40;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c5) {
          s0 = peg$c5;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c41) {
            s0 = peg$c41;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c45) {
              s0 = peg$c45;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e49); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c31) {
                s0 = peg$c31;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e31); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c46) {
                  s0 = peg$c46;
                  peg$currPos += 4;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e50); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c47) {
                    s0 = peg$c47;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e51); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c48) {
                      s0 = peg$c48;
                      peg$currPos += 4;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e52); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c49) {
                        s0 = peg$c49;
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e53); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseAnnotation() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r4.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = input.charAt(peg$currPos);
      if (peg$r4.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
    }
    if (input.charCodeAt(peg$currPos) === 35) {
      s2 = peg$c50;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r4.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r4.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 64) {
        s4 = peg$c51;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseStringName();
        if (s5 !== peg$FAILED) {
          s6 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s7 = peg$c13;
            peg$currPos++;
          } else {
            s7 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s7 !== peg$FAILED) {
            s8 = [];
            s9 = input.charAt(peg$currPos);
            if (peg$r5.test(s9)) {
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = input.charAt(peg$currPos);
              if (peg$r5.test(s9)) {
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e57); }
              }
            }
            if (input.charCodeAt(peg$currPos) === 41) {
              s9 = peg$c14;
              peg$currPos++;
            } else {
              s9 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s9 !== peg$FAILED) {
              peg$savedPos = s6;
              s6 = peg$f82(s5, s8);
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = [];
          s8 = input.charAt(peg$currPos);
          if (peg$r6.test(s8)) {
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e58); }
          }
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = input.charAt(peg$currPos);
            if (peg$r6.test(s8)) {
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e58); }
            }
          }
          s8 = peg$parsenewline();
          if (s8 !== peg$FAILED) {
            s9 = [];
            s10 = peg$parsews();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parsews();
            }
            peg$savedPos = s0;
            s0 = peg$f83(s5, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecapturedcomment() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_capturedcomment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_capturedcomment();
    }
    peg$savedPos = s0;
    s1 = peg$f84(s1);
    s0 = s1;

    return s0;
  }

  function peg$parse_capturedcomment() {
    let s0, s1;

    s0 = [];
    s1 = peg$parsews();
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsews();
      }
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = [];
      s1 = peg$parsenewline();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsenewline();
        }
      } else {
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = [];
        s1 = peg$parsecomment();
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parsecomment();
          }
        } else {
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parse__() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsews();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsews();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f85();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenewline();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsenewline();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f86();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsecomment();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsecomment();
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f87();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parse_() {
    let s0, s1;

    s0 = [];
    s1 = peg$parse__();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parse__();
    }

    return s0;
  }

  function peg$parse_wsnl() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsews();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsews();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f88();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenewline();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsenewline();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f89();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsewsnl() {
    let s0, s1;

    s0 = [];
    s1 = peg$parse_wsnl();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parse_wsnl();
    }

    return s0;
  }

  function peg$parsecomment() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c50;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$currPos;
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r4.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = input.charAt(peg$currPos);
        if (peg$r4.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 64) {
        s5 = peg$c51;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e56); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseStringName();
        if (s6 !== peg$FAILED) {
          s4 = [s4, s5, s6];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r6.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r6.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e58); }
          }
        }
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsews() {
    let s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r4.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }

    return s0;
  }

  function peg$parsenewline() {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 13) {
      s1 = peg$c52;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.charCodeAt(peg$currPos) === 10) {
      s2 = peg$c53;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


  function defaultStructRepresentation () {
    return { map: {} }
  }

  function extend (o1, o2) {
    // we only use a 2-argument form and this also lets us supply `extend` as an argument
    // to Array#reduce and not worry about the additional reducer arguments
    return Object.assign(o1, o2)
  }

  // some values need coercion into proper forms, `default` being one of them
  function coerceValue (value) {
    if (value === 'true') {
      return true
    }
    if (value === 'false') {
      return false
    }
    // this isn't needed yet, just trying the concept
    if (parseInt(value, 10) == value) {
      return parseInt(value, 10)
    }
    return value
  }

  function flattenArray (a) {
    if (!Array.isArray(a)) {
      return a
    }
    return a.reduce((p, c) => p.concat(flattenArray(c)), [])
  }

  function processComments (precomments, linecomment) {
    let pcl = precomments.split('\n')
    // trim trailing empty lines
    while (pcl.length && !pcl[pcl.length - 1].trim()) {
      pcl.pop()
    }
    // trim leading empty lines
    while (pcl.length && !pcl[0].trim()) {
      pcl.shift()
    }

    // Check if there's a blank line followed by comments
    // If so, those comments should be linecomments for the previous field
    let firstCommentAfterBlank = -1
    let hasBlankLine = false
    for (let i = 0; i < pcl.length; i++) {
      if (/^\s*$/.test(pcl[i])) {
        hasBlankLine = true
      } else if (hasBlankLine && /^\s*#/.test(pcl[i])) {
        firstCommentAfterBlank = i
        break
      }
    }

    if (firstCommentAfterBlank !== -1 && !linecomment) {
      // Move comments after blank line to linecomment
      const commentLines = pcl.slice(firstCommentAfterBlank)
      linecomment = commentLines.join('\n')
      pcl = pcl.slice(0, firstCommentAfterBlank)
      // Remove any trailing empty lines from pcl
      while (pcl.length && !pcl[pcl.length - 1].trim()) {
        pcl.pop()
      }
    } else {
      // Original behavior: only keep comments after the last empty line
      let lastempty = pcl.findLastIndex((l) => /^\s*$/.test(l))
      if (lastempty !== -1) {
        pcl = pcl.slice(lastempty + 1)
      }
    }
    // trim leading space and # on each line
    pcl = pcl.map((l) => l.replace(/^[ \t]*#[ \t]?/gm, ''))
    if (linecomment && typeof linecomment !== 'string') {
      linecomment = flattenArray(linecomment).join('')
    }
    linecomment = linecomment ? linecomment.replace(/^[ \t]*#[ \t]?/gm, '') : null
    const comments = (pcl.length || linecomment) ? {} : null
    if (pcl.length) {
      comments.precomments = pcl.join('\n')
    }
    if (linecomment) {
      comments.linecomment = linecomment
    }
    return comments
  }

  peg$result = peg$startRuleFunction();

  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
  if (peg$success) {
    return peg$result;
  } else {
    peg$throw();
  }
}

module.exports = {
  StartRules: ["Root"],
  SyntaxError: peg$SyntaxError,
  parse: peg$parse,
};
